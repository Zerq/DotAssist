{"version":3,"file":"FileView.js","sourceRoot":"","sources":["../../../../../src/home/Components/FileViewer/FileView.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AACpC,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAEhC,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAE9C,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAI9C,MAAM,OAAO,QAAS,SAAQ,WAAW;IACrC;QACI,KAAK,EAAE,CAAC;IAEZ,CAAC;IAEM,eAAe;QAClB,qDAAqD;QACrD,oDAAoD;IACxD,CAAC;IAEM,oBAAoB;QACvB,0EAA0E;QAC1E,uEAAuE;IAC3E,CAAC;IAEM,MAAM,KAAK,kBAAkB;QAChC,OAAO,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC;IAEM,wBAAwB,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB;QAC5E,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;YAElB,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBACnE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACf,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAEM,iBAAiB;QACpB,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBACnE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAKM,KAAK,CAAC,MAAM,CAAC,GAAmB;QACnC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAEpB,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAE9F,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC,KAAK,EAAE,CAAC;YAClC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC/B,iBAAiB,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACzC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjC,CAAC;aACI,CAAC;YACF,eAAe;YACf,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAI/B,iBAAiB,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YACzC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjC,CAAC;IAEL,CAAC;CACJ","sourcesContent":["import { App } from \"../../AppPipe\";\r\nimport { Elm } from \"../../Elm\";\r\nimport { Assets } from \"../../Assets\";\r\nimport { FileSystem } from \"../../FileSystem\";\r\nimport { PathObjectLike } from \"../../PathObjectLike\";\r\nimport { PathType } from \"../../PathType\";\r\nimport { RenderDirectories } from \"./RenderDirectories\";\r\nimport { RenderDrives } from \"./RenderDrives\";\r\nimport { RenderFiles } from \"./RenderFiles\";\r\nimport { RenderParent } from \"./RenderParent\";\r\n\r\n\r\n\r\nexport class FileView extends HTMLElement {\r\n    public constructor() {\r\n        super(); \r\n \r\n    }\r\n\r\n    public adoptedCallback() {\r\n        // called when the element is moved to a new document\r\n        // (happens in document.adoptNode, very rarely used)\r\n    }\r\n\r\n    public disconnectedCallback() {\r\n        // browser calls this method when the element is removed from the document\r\n        // (can be called many times if an element is repeatedly added/removed)\r\n    }\r\n\r\n    public static get observedAttributes() {\r\n        return [\"path\"];\r\n    }\r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n        if (name === \"path\") {\r\n\r\n            const pathItem = App.Pipe.Get(FileSystem).GetDrives(newValue).then(n => {\r\n                this.Render(n);\r\n                App.Pipe.SendEvent(\"FilePathChanged\", newValue);\r\n            });        \r\n        }   \r\n    }\r\n\r\n    public connectedCallback() {\r\n        if (this.hasAttribute(\"path\")) {\r\n            const newValue = this.getAttribute(\"path\");\r\n            const pathItem = App.Pipe.Get(FileSystem).GetDrives(newValue).then(n => {\r\n                this.Render(n);\r\n            });  \r\n        }\r\n    }\r\n\r\n \r\n\r\n\r\n    public async Render(dir: PathObjectLike) {\r\n        this.innerHTML = \"\";\r\n\r\n        this.appendChild(new Elm(\"div\").Text(dir.FullPath.toUpperCase()).Class(\"PathDisplay\").done());\r\n\r\n        if (dir.PathType === PathType.Drive) {\r\n            RenderDrives(dir.Drives, this);\r\n            RenderDirectories(dir.Directories, this);\r\n            RenderFiles(dir.Files, this);\r\n        }\r\n        else {\r\n            //render parent\r\n            RenderParent(dir.Parent, this);\r\n\r\n          \r\n\r\n            RenderDirectories(dir.Directories, this);\r\n            RenderFiles(dir.Files, this);\r\n        }\r\n\r\n    }\r\n}\r\n"]}