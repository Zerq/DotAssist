{"version":3,"file":"AppPipe.js","sourceRoot":"","sources":["../../../src/home/AppPipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { DomainEvent } from \"./DomainEvent\";\r\nimport { Elm, Ctr } from \"./Elm\";\r\n\r\nexport function test() {\r\n\r\n   const myMarkUp = new Elm(\"div\").Attr(\"data-bork\", \"4\").Swallow(() => [\r\n        new Elm(\"span\").Text(\"Hello\"),\r\n        new Elm(\"span\").Text(\"bob\").Style(n => n.display = \"inline-block\")\r\n    ]).done();\r\n\r\n}\r\n\r\nexport class App {\r\n    private constructor() { }\r\n    public static Pipe = new App();\r\n    private stuff: Map<string, any> = new Map();\r\n\r\n    public Set<T>(ctr: Ctr<T>) {\r\n        const instance = new ctr()\r\n        this.stuff.set(ctr.name, instance);\r\n    }\r\n\r\n    public Get<T>(ctr: Ctr<T>): T {\r\n        return this.stuff.get(ctr.name);\r\n    }\r\n\r\n    private eventSubscribers: Map<string, Array<(event: any) => void>> = new Map();\r\n\r\n    public SendDomainEvent(domainEvent: DomainEvent) {\r\n        this.SendEvent(domainEvent.EventName, domainEvent);\r\n    }\r\n\r\n    public SendEvent<T>(eventName:string, event: T) {\r\n        let recived = false;\r\n        if (this.eventSubscribers.has(eventName)) {\r\n            this.eventSubscribers.get(eventName).forEach(n => {\r\n                n(event); // broadcast to all\r\n                recived = true;           \r\n            });\r\n        }\r\n\r\n\r\n            console.log(eventName +  event, \"recived =\" + recived);\r\n\r\n\r\n    }\r\n\r\n    public HandleDomainEvent(eventType: Ctr<DomainEvent>, callback: (event: any) => void) {\r\n        this.Register(eventType.name, callback);\r\n    }\r\n\r\n    public Register<T>(eventName: string, callback: (event: T) => void) {\r\n        if (this.eventSubscribers.has(eventName) && this.eventSubscribers.get(eventName).indexOf(callback) !== -1) {\r\n            this.eventSubscribers.get(eventName).push(callback);\r\n        }\r\n        else {\r\n            this.eventSubscribers.set(eventName, [callback]);\r\n        }\r\n    }\r\n    public Deregister(eventName: string, callback: (event: any) => void) {\r\n        if (this.eventSubscribers.has(eventName)) {\r\n            const subscriber = this.eventSubscribers.get(eventName);\r\n            const index = subscriber.indexOf(callback);\r\n            subscriber.splice(index, 1);\r\n        }\r\n    }\r\n}\r\n"]}