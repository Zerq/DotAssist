{"version":3,"file":"Elm.js","sourceRoot":"","sources":["../../../src/home/Elm.ts"],"names":[],"mappings":"AAIA,iDAAiD;AACjD,+CAA+C;AAC/C,iDAAiD;AACjD,iDAAiD;AACjD,4DAA4D;AAC5D,wEAAwE;AACxE,kFAAkF;AAClF,+DAA+D;AAC/D,MAAM,OAAO,GAAG;IAGZ,YAAmB,OAAe;QAC9B,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;YAClB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,IAAI,CAAC,GAAgB;QAC/B,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;QACjB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,GAAG,CAAsC,IAAgB,EAAE,QAAgE,EAAE,OAAwC;QACxK,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,IAAI;QACP,OAAO,IAAI,CAAC,GAAQ,CAAC;IACzB,CAAC;IAEM,IAAI,CAAC,IAAY,EAAE,KAAa;QACnC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,GAAG,OAAsB;QAClC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;QACzD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,OAA6C;QACtD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IAChB,CAAC;IAGM,IAAI,CAAC,KAAa;QACrB,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,OAAO,CAAC,KAAuB;QAClC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,QAAQ,CAAI,GAAa,EAAE,cAA6B;QAC3D,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC;IAChB,CAAC;CAGJ","sourcesContent":["\r\nexport interface Ctr<T> {\r\n    new(): T;\r\n}\r\n//this is neat! give way better overview then the\r\n//regular DOM api and a feel of the hirarchy...\r\n//trying to use react templates via bable did not\r\n//work out reliably enought and they generate the\r\n//uggliest script you have ever seen! and hard to debug too!\r\n//it was frankly the most disgusting unsightly thing i have ever seen...\r\n//if i have to go with that insanity i wanna go all in on something like preact...\r\n//but frankly i am not entierly convinced it entierly needed...\r\nexport class Elm {\r\n    private elm: HTMLElement;\r\n\r\n    public constructor(tagName: string) {\r\n        if (tagName != null) {\r\n            this.elm = document.createElement(tagName);\r\n        }\r\n    }\r\n\r\n    public static From(elm: HTMLElement) {\r\n        const result = new Elm(null);\r\n        result.elm = elm;\r\n        return result;\r\n    }\r\n\r\n    public Evt<K extends keyof HTMLElementEventMap>(type: K | string, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions) {\r\n        this.elm.addEventListener(type, listener);\r\n        return this;\r\n    }\r\n\r\n    public done<T extends HTMLElement>(): T {\r\n        return this.elm as T;\r\n    }\r\n\r\n    public Attr(name: string, value: string) {\r\n        this.elm.setAttribute(name, value);\r\n        return this;\r\n    }\r\n\r\n    public Class(...classes: Array<string>) {\r\n        classes.forEach(n => this.elm.classList.add(...classes));\r\n        return this;\r\n    }\r\n\r\n    public Style(styling: (style: CSSStyleDeclaration) => void) {\r\n        styling(this.elm.style);\r\n        return this;\r\n    }\r\n\r\n\r\n    public Text(value: string) {\r\n        this.elm.innerText = value;\r\n        return this;\r\n    }\r\n\r\n    public Swallow(stuff: () => Array<Elm>) {\r\n        stuff().forEach(n => this.elm.appendChild(n.done()));\r\n        return this;\r\n    }\r\n\r\n    public EatArray<T>(ary: Array<T>, transformation: (n: T) => Elm) {\r\n        ary.forEach(n => this.elm.appendChild(transformation(n).done()));\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n"]}