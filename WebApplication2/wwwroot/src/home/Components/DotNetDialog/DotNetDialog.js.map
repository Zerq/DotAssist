{"version":3,"file":"DotNetDialog.js","sourceRoot":"","sources":["../../../../../src/home/Components/DotNetDialog/DotNetDialog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AACpC,OAAO,EAAE,GAAG,EAAE,MAAM,WAAW,CAAC;AAChC,OAAO,EAAE,gBAAgB,EAAY,MAAM,iBAAiB,CAAC;AAE7D,MAAM,CAAN,IAAY,aAEX;AAFD,WAAY,aAAa;IACzB,+CAAG,CAAA;IAAE,6CAAE,CAAA;IAAE,6CAAE,CAAA;IAAE,iDAAI,CAAA;IAAE,yDAAQ,CAAA;IAAE,mDAAK,CAAA;IAAE,qDAAM,CAAA;IAAE,iDAAI,CAAA;AAChD,CAAC,EAFW,aAAa,KAAb,aAAa,QAExB;AAED,MAAM,OAAO,YAAa,SAAQ,WAAW;IAClC,eAAe;IACtB,CAAC;IAEM,oBAAoB;IAC3B,CAAC;IAEM,MAAM,KAAK,kBAAkB;QAChC,OAAO,EAAE,CAAC;IACd,CAAC;IAIM,wBAAwB,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB;IAEhF,CAAC;IAEM,iBAAiB;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAGD,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IACD,IAAW,YAAY,CAAC,KAAoB;QACxC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,eAAe;QACxB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;QACzC,OAAO,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClD,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAgB,iBAAiB,EAAE,CAAC,CAAC,EAAE;gBACpD,OAAO,CAAC,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,KAAK,CAAC,MAAM;QACf,MAAM,SAAS,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,YAAY,EAAE,CAAC;QACtE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACzB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;gBAC5B,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;oBAChF,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;oBAC3B,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC;oBAC/B,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACrE,CACA,CAAC;aAEL,CAAC;SAEL,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { App } from \"../../AppPipe\";\r\nimport { Elm } from \"../../Elm\";\r\nimport { DotNetCLIService, Template } from \"./DotNetService\";\r\n\r\nexport enum DialogResults {\r\nYes, No, Ok, Next, Complete, Abort, Cancel, Back\r\n}\r\n\r\nexport class DotNetDialog extends HTMLElement {\r\n    public adoptedCallback() {\r\n    }\r\n\r\n    public disconnectedCallback() {\r\n    }\r\n\r\n    public static get observedAttributes(): Array<string> {\r\n        return [];\r\n    }\r\n\r\n \r\n\r\n    public attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n \r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.render();\r\n    }\r\n\r\n    private dialogResult: DialogResults;\r\n    public get DialogResult() {\r\n        return this.dialogResult;\r\n    }\r\n    public set DialogResult(value: DialogResults) {\r\n        this.dialogResult = value;\r\n        App.Pipe.SendEvent(\"dialogResultSet\", value);\r\n    }\r\n\r\n    public async ShowDialogAsync(): Promise<DialogResults> {\r\n        this.querySelector(\"dialog\").showModal();\r\n        return new Promise<DialogResults>((resolve, reject) => {\r\n            App.Pipe.Register<DialogResults>(\"dialogResultSet\", n => {\r\n                resolve(n);\r\n                this.querySelector(\"dialog\").close();\r\n            });\r\n        })   \r\n    }\r\n\r\n    public async render() {\r\n        const templates = await App.Pipe.Get(DotNetCLIService).GetTemplates();\r\n        Elm.From(this).Swallow(() => [\r\n            new Elm(\"dialog\").Swallow(() => [\r\n                new Elm(\"div\").EatArray(templates, n => new Elm(\"div\").Class(\"group\").Swallow(() => [\r\n                    new Elm(\"div\").Text(n.Name),\r\n                    new Elm(\"div\").Text(n.FullName),\r\n                    new Elm(\"div\").EatArray(n.Languages, n => new Elm(\"span\").Text(n))\r\n                ]\r\n                ))\r\n           \r\n            ])\r\n\r\n        ]);\r\n    }\r\n}"]}